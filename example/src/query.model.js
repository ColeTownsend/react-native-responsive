import { Helper } from "./services";

class Model {
	constructor(expected) {
		this.expected = expected;
	}

	static isInIntervalOrEqualFromOperator(operator, expected, actual) {
		switch(operator) {
			case "min": return Model.isInIntervalOrEqual(actual, null, expected);
			case "max": return Model.isInIntervalOrEqual(actual, null, null, expected);
			case "equal": return Model.isInIntervalOrEqual(actual, expected);
			default: return true;
		}
	}

	static isInIntervalOrEqual(val, valProp, minProp, maxProp) {
		if(valProp || minProp || maxProp)
			return Helper.isInIntervalOrEqual(val, valProp, minProp, maxProp);

		//Par dÃ©fault, si aucune propriÃ©tÃ© n'est spÃ©cifiÃ©e, on considÃ¨re
		//la valeur comme valide par dÃ©faut (pour permettre l'affichage des enfants):
		return true;
	}

	/*
	NB: pour simuler une variable privÃ©e sous ES2015, utilisation de Symbol qui permet d'attribuer un identifiant unique 
	non accessible depuis le scope extÃ©rieur sans rÃ©flexion (cf. Reflect). Exemple de privatisation d'une variable:
	var privateVariable = Symbol();
	class Test {
		constructor(){
			this[privateVariable] = "test";
		}
	}
	var instance = new Test();
	console.log(instance.privateVariable); //=> undefined depuis l'extÃ©rieur (seulement accessible 
	depuis l'intÃ©rieur de la classe via l'opÃ©rateur d'objet this)
	*/
}

class Device extends Model {
	//expected contiendra l'ensemble des contraintes spÃ©cifiÃ© par l'utilisateur soit via les props (composant) soit via un objet (dans le cas des dÃ©corateurs).
	constructor(expected) {
		super(expected);
	}

	debug(identifierName) {
		console.log(
			`ðŸ“± DEVICE LOGS for ${identifierName}:\n`,
			`	ðŸ‘‰ ðŸ“± Device Width (px): ${Helper.deviceWidth} px\n`,
			`	ðŸ‘‰ ðŸ“± Device Height (px): ${Helper.deviceHeight} px\n`,
			`	ðŸ‘‰ ðŸ“± Device Width (dp): ${Helper.dpDeviceWidth} dp\n`,
			`	ðŸ‘‰ ðŸ“± Device Height (dp): ${Helper.dpDeviceHeight} dp\n`,
			`	ðŸ‘‰ ðŸ“± Device Pixel Ratio: ${Helper.pixelRatio}\n\n`,
			`	ðŸ‘‰ ðŸ“± props.deviceWidth: ${this.expected.deviceWidth} px\n`,
			`	ðŸ‘‰ ðŸ“± props.minDeviceWidth: ${this.expected.minDeviceWidth} px\n`,
			`	ðŸ‘‰ ðŸ“± props.maxDeviceWidth: ${this.expected.maxDeviceWidth} px\n`,
			`	ðŸ‘‰ ðŸ“± props.deviceHeight: ${this.expected.deviceHeight} px\n`,
			`	ðŸ‘‰ ðŸ“± props.minDeviceHeight: ${this.expected.minDeviceHeight} px\n`,
			`	ðŸ‘‰ ðŸ“± props.maxDeviceHeight: ${this.expected.maxDeviceHeight} px\n`,
			`	ðŸ‘‰ ðŸ“± props.pixelRatio: ${this.expected.pixelRatio}\n`,
			`	ðŸ‘‰ ðŸ“± props.minPixelRatio: ${this.expected.minPixelRatio}\n`,
			`	ðŸ‘‰ ðŸ“± props.maxPixelRatio: ${this.expected.maxPixelRatio}\n`,
		);
	}

	//VALIDATIONS DES CONTRAINTES DE TAILLES SPECIFIQUES AU HARDWARE (immutables):
	isValid() {
		return this.isValidWidth(this.expected) && this.isValidHeight(this.expected) && this.isValidPixelRatio(this.expected);
	}

	isValidWidth(expected) {
		return Device.isInIntervalOrEqual(Helper.deviceWidth, expected.deviceWidth, expected.minDeviceWidth, expected.maxDeviceWidth);
	}

	isValidHeight(expected) {
		return Device.isInIntervalOrEqual(Helper.deviceHeight, expected.deviceHeight, expected.minDeviceHeight, expected.maxDeviceHeight);
	}

	isValidPixelRatio(expected) {
		return Device.isInIntervalOrEqual(Helper.pixelRatio, expected.pixelRatio, expected.minPixelRatio, expected.maxPixelRatio);
	}

	static isValidWidthFromOperator(operator, expectedWidth) {
		return Device.isInIntervalOrEqualFromOperator(operator, expectedWidth, Helper.deviceWidth);
	}

	static isValidHeightFromOperator(operator, expectedHeight) {
		return Device.isInIntervalOrEqualFromOperator(operator, expectedHeight, Helper.deviceHeight);
	}

	static isValidPixelRatioFromOperator(operator, expectedPixelRatio) {
		return Device.isInIntervalOrEqualFromOperator(operator, expectedPixelRatio, Helper.pixelRatio);
	}

	static get information() {
		return [
			`ðŸ‘‰ ðŸ“± Device Width (px): ${Helper.deviceWidth} px`,
			`ðŸ‘‰ ðŸ“± Device Height (px): ${Helper.deviceHeight} px`,
			`ðŸ‘‰ ðŸ“± Device Width (dp): ${Helper.dpDeviceWidth} dp`,
			`ðŸ‘‰ ðŸ“± Device Height (dp): ${Helper.dpDeviceHeight} dp`,
			`ðŸ‘‰ ðŸ“± Device Pixel Ratio: ${Helper.pixelRatio}`
		];
	}
}

export {
	Device
};
